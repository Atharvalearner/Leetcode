class Solution {
    public List<Integer> lexicalOrder(int n) {
        List<Integer> ls = new ArrayList<>();
        int curr = 1;
        for(int i = 1; i <= n; i++){
            ls.add(curr);
            if(curr * 10 <= n){
                curr = curr * 10;
            }else{
                while(curr % 10 == 9 || curr >= n){
                    curr = curr / 10;
                }
                curr = curr + 1;
            }
        }
        return ls;
    }
}

# Intuition :
lets take n = 25 , lets say i have a list initially empty.
int curr = 1;
	for i=1 to i<=25 i++
	// would add curr
	{1, }
//now i have to add association of 1 , 10, 11 .....>
so to do that we have to multiply curr with 10 (curr=1 as of now)
curr = 1*10; 10 so its less than 25 so no problem, will go to loop

now we would add curr to list (curr = 10 now), now list like below
{1, 10, }

again we will multiply curr * 10 = 10 * 10 = 100 But But this is greater than 25 .
yes so we can not do that ....then what ?

no problem whenever this situation appear we will go to else part and increment the curr by 1
well so now curr = 10 + 1 = 11 ...will go to for loop again...
now our list would look like :-
{1, 10, 11}

again curr*10 = 110 greater than 25...so again go to else part and keep on increatment them.
our list would be at times like below :-
{1, 10, 12, 13, 14, 15, 16, 17, 18, 19} at this time our char = 19 and we would going below ...again curr = 10 * 19 = 190 > 25 so again will go to else part

BUT bro your were saying we would keep on increment curr by one so now you would make it curr = 19 + 1 = 20

so you would add 20 to list , so where is 2 ? why why??
wait a min i would be also checking in else part that whatever is my curr value does this curr is having curr % 10 = 9
with this help i will catch the values like 19, so when curr = 19
in else part if(curr%10==9) i will update the curr val so that it will converted to

curr = curr/10 ===> 19/10 ==> 1
and now again i will increase it so curr = curr + 1 = 2
and yes , i would keep on doing same thing.

but wait a min, how would you print all those single digits like 3, 4, 5, 6, 7, 8, 9 ?
well when we would add the numbers till 25 , our curr = 26 , we will again come curr = curr*26 > 25 , so we will go to else part....

now here i would also add a condition same if where we put curr%10==9
i will use OR curr>=n (25 in this case) we will make

curr = curr/10; ===> 25/10 ===> 2 increment = 2+1 = 3 will go to for loop again ..... curr = 10*3 > 25, will go to else part, will increase it again ....
it would add 3, 4, 5, 6, 7, 8, 9

Ok, so what is next value after adding 9?
ohh, come one bro, our for loop is only runs 25 times...it would be done no more execcution.
our list would be like this:-
{1, 10, ....19, 2, 21, 22, 23, 24, 25, 3, 4, 5, 6, 7, 8, 9}

# Approach :
1. we first add elements starting from 1 in lexographically.
2. iterate from 1 till n.
3. on each current number : 
	- we find whether (curr * 10 <= n) if yes then we set curr as curr*10.
	- else we check whether curr % 10 is 9 or curr is less or equal to N or not if one of both condition apply then (curr = curr / 10) means we need to reduce the number to remaning.
	- else if we just need to add curr + 1 to curr.
4. return list.

# Complexity : 
- Time : O(N)
- Space : O(1)