class Solution {
    int leftHeight;
    int rightHeight;
    int[] ans;
    public int[] treeQueries(TreeNode root, int[] queries) {
        leftHeight = 0;
        rightHeight = 0;
        ans = new int[100001];
        int[] res = new int[queries.length];
        dfsLeft(root, 0);
        dfsRight(root, 0);
        for(int i = 0; i < queries.length; i++){
            res[i] = ans[queries[i]];
        }
        return res;
    }
    
    public void dfsLeft(TreeNode root, int level){
        if(root == null) return;
        ans[root.val] = leftHeight;
        leftHeight = Math.max(leftHeight, level);
        dfsLeft(root.left, level + 1);
        dfsLeft(root.right, level + 1);
    }
    
     public void dfsRight(TreeNode root, int level){
        if(root == null) return;
        ans[root.val] = Math.max(rightHeight, ans[root.val]);
        rightHeight = Math.max(rightHeight, level);
        dfsRight(root.right, level + 1);
        dfsRight(root.left, level + 1);
    }
}