class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        List<String> path = new ArrayList<>();
        backtrack(0, s, path, result);
        return result;
    }
    public void backtrack(int start, String s, List<String> path, List<List<String>> result) {
        if (start == s.length()) {
            result.add(new ArrayList<>(path));
            return;
        }
        for (int end = start + 1; end <= s.length(); ++end) {
            String substr = s.substring(start, end);
            if (isPalindrome(substr)) {
                path.add(substr);
                backtrack(end, s, path, result);
                path.remove(path.size() - 1);
            }
        }
    }
    private boolean isPalindrome(String s) {
        int left = 0, right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) return false;
            left++;
            right--;
        }
        return true;
    }
}

Complexity :
- Time : O(2^n.n)
- Space : O(2^n.n)

Approach:
1. partition Method: This initializes the result list and starts the backtracking process from index 0 with an empty path.
2. backtrack Method:
	- It explores all possible partitions of the string s starting from a given index.
	- If the current start index equals the length of the string, it means we have a valid partition and we add it to the result list.
	- It iterates through possible end indices, forms substrings, and checks if they are palindromes.
	- If a substring is a palindrome, it's added to the current path, and we recursively call backtrack for the next part of the string.
	- After the recursive call, the last substring is removed to explore other partitions.
3. isPalindrome Method:
	It checks if a given substring is a palindrome by comparing characters from both ends towards the middle.