class Solution {
    public int stoneGameII(int[] piles) {
        int n = piles.length;
        int[] sufixSum = new int[n + 1];
        for(int i = n - 1; i >= 0; i--){
            sufixSum[i] = sufixSum[i + 1] + piles[i];
        }
        return aliceStones(sufixSum, 1, 0, new int[n][n+1]);
    }
    private int aliceStones(int[] sufixSum, int m, int currPile, int[][] memo){
        int totalPiles = sufixSum.length - 1;
        if(currPile >= totalPiles){
            return 0;
        }
        if((currPile + 2 * m) >= totalPiles){
            return sufixSum[currPile];
        }
        if(memo[currPile][m] != 0){
            return memo[currPile][m];
        }
        int maxStones = 0;
        for(int i = 1; i <= 2 * m; i++){
            int currStones = sufixSum[currPile] - aliceStones(sufixSum, Math.max(m, i), currPile + i, memo);
            maxStones = Math.max(maxStones, currStones);
        }
        memo[currPile][m] = maxStones;
        return maxStones;
    }
}

# Complexity :
- Time : O(N^2)
- Space : O(N^2)