class Solution {
    public int findCenter(int[][] edges) {
        if(edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1]){
            return edges[0][0];
        }else{
            return edges[0][1];
        }
    }
}

# Intuition : 
we need find the center element of graph, according to graph constraint each edge is connected to the center node, so we don't need to all over graph we just check whether 1st element of 1st edge is equal to 1st or 2nd node if one of them is match then we return 1st edge element as center, else we return 2nd edge.

# Dry Run :
edges = [[1,2],[2,3],[4,2]]

edges[0][0] = 1, edges[0][1] = 2, edges[1][0] = 2
edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1]
 as we can see edges[0][0] is match with edges[1][0] hence we return edges[0][0], else
 we return edges[0][1].

# Complexity :
- Time : O(1)
- Space : O(1)