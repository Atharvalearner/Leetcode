class Solution {
    double probablity = 0;
    public double frogPosition(int n, int[][] edges, int t, int target) {
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i <= n ; i++){
            graph.add(new ArrayList<>());
        }
        for(int[] edge : edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        traverse(1,t,target,graph,1,new boolean[n+1]);
        return probablity;
    }
    public void traverse(int index,int time,int target,List<List<Integer>> graph,double ans,boolean[] visited){
        int size = graph.get(index).size() - (index == 1 ? 0 : 1);
        visited[index] = true;
        if(index == target){
            if(time == 0){
                probablity = ans;
            }else if(time > 0 && size == 0){
                probablity = ans;
            }
            return;
        }
        if(time > 0){
            for(int node : graph.get(index)){
                if(!visited[node]){
                    traverse(node,time-1,target,graph,ans/size,visited);
                }
            }
        }
    }
}