class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode odd  = head;
        ListNode p = head.next;
        ListNode even  = p;
        while(odd.next != null && even.next != null){
            odd.next = even.next;
            odd = odd.next;

            even.next = odd.next;
            even = even.next;
        }
        odd.next = p;
        return head;
    }
}

/*
# Intuition
The First part will contain all the odd elements and the second part will contain all the even elements and then we have to link first part with second part.

# Approach :
1. Make a odd pointer which will point to the head.
2. Make a p pointer which will point to the head.next .
3. Now at every iteration we will change the next element of the node of all the odd elements and right elements.
4. At the end of odd elemets we will link the even elements.

# Complexity :
- Time complexity:O(n)
- Space complexity:O(1)
*/