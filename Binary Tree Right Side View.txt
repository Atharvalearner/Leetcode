class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        dfs(root, res, 0);
        return res;
    }
    private void dfs(TreeNode root, List<Integer> res, int level){
        if(root == null){
            return;
        }
        if(res.size() == level){
            res.add(root.val);
        }
        dfs(root.right, res, level + 1);
        dfs(root.left, res, level + 1);
    }
}

# Approach :
1. initialize empty arraylist to store result.
2. then traverse tree nodes one by one using DFS.
3. if current node is null then return.
4. if our result list size is equal to current level then add current node value and go to right node recursively.
5. if their is no right node then go to left node and find right node value and again repeat from step 2.
6. after traversing all over nodes in tree return result list.

# Test Case:
Input: 1 3 2

      1
    /    \
   3      2
Output: 1 2

Input: 10 20 30 40 60

     10
    /   \
  20     30
 /   \
40  60 
Output: 10 30 60

# Complexity : 
- Time : O(N)
- Space : O(H)