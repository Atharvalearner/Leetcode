class Solution {
    public boolean search(int[] nums, int target) {
        int start = 0;
        int end = nums.length -1;
        while(start <= end){
            int mid = start + (end - start) / 2;
            if(nums[mid] == target){        // if target is equal to mid element then return mid element.
                return true;
            }
            if(nums[start] == nums[mid] && nums[mid] == nums[end]){     // if target is equal to start element then increment start and if mid is equal to end then decrement end.
                start++;
                end--;
            }else if(nums[start] <= nums[mid]){     // if mid is greater than start then it is sorted already we iterate and check that the target is found or not.
                if(target <= nums[mid] && target >= nums[start]){       // if target is less than or equal to mid and greater or equal to start then search target in left side of mid.
                    end = mid - 1;
                }else{
                    start = mid + 1;
                }
            }else{      // if mid is less than end then it is sorted already we only iterate and check that the target is found or not.
                if(target >= nums[mid] && target <= nums[end]){     // if target is greater than or equal to mid and less or equal to end then search target in rigth side of mid.
                    start = mid + 1;
                }else{
                    end = mid - 1;
                }
            }
        }
        return false;
    }
}