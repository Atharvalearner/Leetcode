class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int sum = 0;
        int closeSum = nums[0]+nums[1]+nums[2];
        for(int start=0;start<nums.length;start++){
            int pt = start+1;
            int end = nums.length-1;
            while(pt < end){
                sum = nums[start] + nums[pt] + nums[end];
                if(sum == target){
                    return sum;
                }else if(sum > target){
                    end--;
                }else{
                    pt++;
                }
                if(Math.abs(sum-target) < Math.abs(closeSum-target)){
                    closeSum = sum;
                }
            }
        }
        return closeSum;
    }
}
/*
# Approach: 
1  . Sort the given array in ascending order.
2  . Initialize a variable closeSum to store the closest sum found so far. Set it initially to the sum of first three elements in the sorted array.
3  . Loop over the array from start=0 to start=nums.length.
4  . For each start, initialize two pointers, pt and end, to start+1 and nums.length-1 respectively.
5  . While pt < end, calculate the sum of the current triplet, sum = nums[start] + nums[pt] + nums[end].
6  . If sum is equal to the target, we have found the closest sum possible, so we can return it immediately.
7  . If sum is greater than target, decrement end by 1. This will decrease the sum, and we may get a closer sum.
8  . If sum is less than target, increment pt by 1. This will increase the sum, and we may get a closer sum.
9  . After each iteration of the inner loop, check if the absolute difference between sum and target is less than the absolute difference between closeSum and target. If it is, update closeSum to sum.
10  . Return closeSum.
# Complexity
- Time complexity: O(n^2logn)
- Space complexity: O(1)
*/