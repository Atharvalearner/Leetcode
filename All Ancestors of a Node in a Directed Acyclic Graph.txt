class Solution {
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList<>());
        }
        int[] indegree = new int[n];
        for(int[] edge : edges){
            graph.get(edge[0]).add(edge[1]);
            indegree[edge[1]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < n; i++){
            if(indegree[i] == 0){
                q.add(i);
            }
        }
        List<Set<Integer>> ancestors = new ArrayList<>();
        for(int i = 0; i < n; i++){
            ancestors.add(new HashSet<>());
        }
        while(!q.isEmpty()){
            int curr = q.poll();
            for(int i : graph.get(curr)){
                indegree[i]--;
                ancestors.get(i).add(curr);
                for(int ancestor : ancestors.get(curr)){
                    ancestors.get(i).add(ancestor);
                }
                if(indegree[i] == 0){
                    q.add(i);
                }
            }
        }
        List<List<Integer>> res = new ArrayList<>();
        for(int i = 0; i < n; i++){
            List<Integer> ls = new ArrayList<>(ancestors.get(i));
            Collections.sort(ls);
            res.add(ls);
        }
        return res;
    }
}