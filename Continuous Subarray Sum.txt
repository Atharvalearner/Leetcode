class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {      
        Map<Integer, Integer> map = new HashMap<>();
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum = sum + nums[i];
            sum = sum % k; 
            if (sum == 0 && i > 0) {	// We find that prefix sum mod by k equals 0, which is what we want. If the size > 1, return true directly.
                return true;
            }
            if (map.containsKey(sum) && i - map.get(sum) > 1) { // We check whether prefix sum mod by k is already in our hash set. If it is, and the size > 1 restriction is also satisfied, return true.
                return true;
            }
            if (!map.containsKey(sum)) {
                map.put(sum, i); 
            }
        }
        return false;
    }
}

# Complexity :
- Time : O(n) 
- Space : O(n)		... for hash map storage