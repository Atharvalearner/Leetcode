class Solution {
    public ListNode mergeInBetween(ListNode list1, int a, int b, ListNode list2) {
        ListNode temp = list1, prev = list1, curr = list1;
        a--;
        while(list1 != null && a-- > 0){	// traverse till a-1 node of list1.
            temp = temp.next;
            prev = temp;
        }
        temp = list1;		// reset temp to traverse list1 again.
        while(temp != null && b-- > 0){		// traverse till b+1 node of list1.
            temp = temp.next;
            curr = temp;
        }
        ListNode traverseList2 = list2;		// traverse list2.
        while(traverseList2.next != null){	// traverse list2 untill last node 
            traverseList2 = traverseList2.next;
        }
        prev.next = list2;	// attach a-1 node of list1 with starting node of list2.
        traverseList2.next = curr.next;		// attach last node list2 with b+1 node of list1.
        return list1;		// return list1.
    }
}

# Approach:
1. Traverse list1 to find the node at position a-1, a, and b+1.
2. Attach the last node of list2 to the node after position b.
3. Attach the node before position a to the head of list2.
4. Return the head of list1.

# Complexity :
- Time : O(N)
- Space : O(N)

