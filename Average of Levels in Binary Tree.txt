class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> res = new ArrayList<>();	// stores result.
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);			
        while(!q.isEmpty()){
            int level = q.size();		// calculate level by size of queue. because every level the number of nodes increases.
            double currLevelAns = 0.0;
            for(int i = 0; i < level; i++){	// poll queue elements till queue become empty and add their values to currLevelAns.
                TreeNode curr = q.poll();
                currLevelAns = currLevelAns + curr.val;
                if(curr.left != null){		// if current node have left and right child then it add that node to queue.
                    q.offer(curr.left);
                }
                if(curr.right != null){
                    q.offer(curr.right);
                }
            }
            res.add(currLevelAns / level);	// add the ans value as currentLevelAns / level into result list.
        }
        return res;
    }
}

# Complexity :
- Time : O(N)
- Space : O(h)