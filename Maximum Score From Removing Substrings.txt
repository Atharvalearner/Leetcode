class Solution {
    public int maximumGain(String s, int x, int y) {
        int acount = 0, bcount = 0;
        int smaller = Math.min(x,y);
        int res = 0;
        for(int i = 0; i < s.length(); i++){
            char ch = s.charAt(i);
            if(ch > 'b'){
                res = res + Math.min(acount, bcount) * smaller;
                acount = 0;
                bcount = 0;
            }else if(ch == 'a'){
                if(x < y && bcount > 0){
                    bcount--;
                    res = res + y;
                }else{
                    acount++;
                }
            }else{
                if(x > y && acount > 0){
                    acount--;
                    res = res + x;
                }else{
                    bcount++;
                }
            }
        }
        res = res + Math.min(acount, bcount) * smaller;
        return res;
    }
}

# Approach :
1. Initialization:
	- Initialize counters aCount and bCount to zero to keep track of the counts of 'a' and 'b' in the substring under consideration.
	- Determine which operation to prioritize based on the higher point value (x or y).
2. Iterate Through the String:
	- Traverse through each character in the string s.
	- If the current character is neither 'a' nor 'b', calculate the possible points gained from the counts of 'a' and 'b' seen so far and reset the counters.
3. If the current character is 'a' or 'b':
	- Depending on whether x (points for "ab") is greater than y (points for "ba"), either prioritize reducing the count of 'b' when 'a' is encountered (for "ba") or reduce the count of 'a' when 'b' is encountered (for "ab").
	- Update the result with the corresponding points and adjust the counters accordingly.
4. Final Calculation:
	- After the loop, there might still be some 'a' and 'b' left which could be paired to form either "ab" or "ba". Add these remaining points to the result.

# Complexity :
- Time : O(N)
- Space : O(1)