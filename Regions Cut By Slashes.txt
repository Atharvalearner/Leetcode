class Solution {
    public int regionsBySlashes(String[] grid) {
        int n = grid.length;
        int[][] graph = new int[n*3][n*3];
        for(int row = 0; row < n; row++){
            for(int col = 0; col < n; col++){
                if(grid[row].charAt(col) == '/'){
                    graph[row * 3][col * 3 + 2] = 1;
                    graph[row * 3 + 1][col * 3 + 1] = 1;
                    graph[row * 3 + 2][col * 3] = 1;
                }else if(grid[row].charAt(col) == '\\'){
                    graph[row * 3][col * 3] = 1;
                    graph[row * 3 + 1][col * 3 + 1] = 1;
                    graph[row * 3 + 2][col * 3 + 2] = 1;
                }
            }
        }
        int count = 0;
        for(int row = 0; row < n * 3; row++){
            for(int col = 0; col < n * 3; col++){
                if(graph[row][col] != 1){
                    dfs(graph, row, col);
                    count++;
                }
            }
        }
        return count;
    }
    private void dfs(int[][] graph, int row, int col){
        if(row < 0 || row >= graph.length || col < 0 || col >= graph.length || graph[row][col] != 0 ){
            return;
        }
        graph[row][col] = 1;
        dfs(graph, row, col-1);
        dfs(graph, row, col+1);
        dfs(graph, row-1, col);
        dfs(graph, row+1, col);
    }
}

# Intuition : 
You need to create an array that is 3 times larger than the input.
It turns out that for one cell from the input array, we create 9 cells.

Example:
1. grid = { "/" }
   arr = {
          001,
	  010,
	  100};

2. grid = { "\" }
   arr = {
	  100,
	  010,
	  001};

Then we find the cell with the value 0, and start the depth-first search and change the value everywhere from 0 to 1. After each launch of the depth-first search method, need increment the answer. Then we return the received answer.

# Complexity :
- Time : O(N ^ 2)
- Space : O(N*N)