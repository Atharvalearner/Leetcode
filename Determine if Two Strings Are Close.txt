class Solution {
    public boolean closeStrings(String word1, String word2) {
        if(word1.length() != word2.length()){
            return false;
        }
        int[] w1 = new int[26];
        int[] w2 = new int[26];
        for(int i = 0; i < word1.length(); i++){
            w1[word1.charAt(i) - 'a']++;
            w2[word2.charAt(i) - 'a']++;
        }
        for(int i = 0; i < 26; i++){
            if((w1[i] == 0 && w2[i] != 0) || (w1[i] != 0 && w2[i] == 0)){
                return false;
            }
        }
        Arrays.sort(w1);
        Arrays.sort(w2);
        for(int i = 0; i < 26; i++){
            if(w1[i] != w2[i]){
                return false;
            }
        }
        return true;
    }
}

# Approaches :
1. Frequency Counting:
	- Two arrays (w1 and w2) are used to count the frequency of each letter in word1 and word2.
	- w1[i] stores the count of the i-th letter in the English alphabet in word1, and similarly for w2.
2. Checking Presence of Characters:
	- Iterate over each character in the alphabet.
	- If a character is present in one word and not in the other (or vice versa), return false.
	- This ensures that both words contain the same set of characters.
3. Sorting Frequencies:
	- Sort the frequency vectors (w1 and w2).
	- This step is necessary because the order of frequencies doesn't matter, only their values.
4. Comparing Sorted Frequencies:
	- Iterate through the sorted frequency vectors and compare corresponding elements.
	- If any corresponding elements are not equal, return false.
5. Final Result:
	- If all the checks pass, return true, indicating that the two words are "close" as per the problem definition.

# Complexity :
- Time : O(n)
- Space : O(1)