class Solution {
    public int nearestExit(char[][] maze, int[] entrance) {
        int rows = maze.length;
        int cols = maze[0].length;
        Queue<int[]> q = new LinkedList<>();
        q.offer(entrance);
        maze[entrance[0]][entrance[1]] = '+';
        int[][] directions = new int[][]{
            {0,1},{0,-1},{1,0},{-1,0}
        };
        int steps = 0;
        int x,y;
        while(!q.isEmpty()){
            steps++;
            int n = q.size();
            for(int i = 0; i < n; i++){
                int[] currCell = q.poll();
                for(int[] direction : directions){
                    x = currCell[0] + direction[0];
                    y = currCell[1] + direction[1];
                    if(x < 0 || x >= rows || y < 0 || y >= cols){
                        continue;
                    } 
                    if(maze[x][y] == '+'){
                        continue;
                    }
                    if(x == 0 || x == rows - 1 || y == 0 || y == cols - 1){
                        return steps;
                    }
                    maze[x][y] = '+';
                    q.offer(new int[]{x , y});
                }
            }
        }
        return -1;
    }
}

# Approach :
1. A classic breadth first search problem, we use slowly expanding from the starting node.
2. We can imagine every position in the 'maze' as a node with the 'maze' being a directional graph, since we cannot visit the same node twice to find the shortest path to the exit.
3. As such, we take one step at a time to all directions to a new valid position.
4. To check for invalid moves, either that direction is out of bound or towards a wall.
5. If that direction leads to a border space, it means it is the exit.
6. With breadth first search, we use Queue store the nodes for the next step.
7. To mark the visited node, we can either use an additional 2D boolean array to record, or mark the visited node as a wall '+' in 'maze', latter which is implemented here.

# Complexity :
- Time : O(N * M)
- Space : O(N + M)