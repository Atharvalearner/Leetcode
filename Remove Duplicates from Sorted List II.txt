class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null || head.next == null){
            return head;
	}
        ListNode temp = new ListNode(0);	// create a temp node that acts like a temp head of list pointing to the original head and it points to the original head.
        temp.next = head;
        ListNode curr = temp;
        // Loop till curr.next and curr.next.next not null
        while(curr.next != null && curr.next.next != null){         // curr.next means the next node of curr pointer and curr.next.next means the next of next of curr pointer...
            if(curr.next.val == curr.next.next.val) { 	// if the value of curr.next and curr.next.next is same, means duplicate value present in the list
                int duplicate = curr.next.val;
                // If the next node of curr is not null and its value is equal to the duplicate value
                while(curr.next !=null && curr.next.val == duplicate) {		// Skip those element and keep updating curr
                    curr.next = curr.next.next;
                }
            }
            else{	// Otherwise, move curr forward
                curr = curr.next;
            }
        }
        return temp.next;       // Return the linked list
    }
}