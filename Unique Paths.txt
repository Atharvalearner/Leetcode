class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for(int row = 0; row < m; row++){
            dp[row][0] = 1;
        }
        for(int col = 0; col < n; col++){
            dp[0][col] = 1;
        }
        for(int row = 1; row < m; row++){
            for(int col = 1; col < n; col++){
                dp[row][col] = dp[row - 1][col] + dp[row][col - 1];
            }
        }
        return dp[m-1][n-1];
    }
}

# Intuition :
The idea behind this approach is to use a 2D Dynamic Programming (DP) array to store the number of unique paths to each cell. A cell (i,j) can be reached either from (i−1,j) or (i,j−1), and thus the number of unique paths to (i,j) is the sum of the number of unique paths to these two cells.

1. Initialization:Create a m×n DP array, initializing the first row and first column to 1 because there's only one way to reach those cells from the starting point.
2. Iterate over the DP array starting from cell (1,1).
3. For each cell (i,j), set dp[i][j]=dp[i−1][j]+dp[i][j−1].

# Complexity :
- Time : O(m×n) 	... We iterate through each cell once.
- Space : O(m×n) 	... For the DP array.
