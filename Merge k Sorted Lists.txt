class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        return partition(lists,0,lists.length-1);
    }
    public ListNode partition(ListNode[] list,int start,int end){
        if(start == end){
            return list[start];
        }
        if(start < end){
            int mid = (start + end) / 2;
            ListNode l1 = partition(list,start,mid);
            ListNode l2 = partition(list,mid+1,end);
            return merge(l1,l2);
        }else{
            return null;
        }
    }
    public ListNode merge(ListNode l1,ListNode l2){
        if(l1 == null){
            return l2;
        }
        if(l2 == null){
            return l1;
        }
        if(l1.val < l2.val){
            l1.next = merge(l1.next,l2);
            return l1;
        }else{
            l2.next = merge(l1,l2.next);
            return l2;
        }
    }
}

/*
# Intuition
Divide list into no. of parts then sort it using merge sort

# Approach:
1. First, we divide given array list into partitions.
2. we divide the array list using binary search algo we find mid and then divide main array list into 2 lists, i.e l1 and l2.
3. l1 will patitionize the list from starting to mid.
4. and l2 will patitionize the list mid+1 to end.
5. we need and in 1 list hence we merge l1 and l2 using merge method.
6. In merge, if l1 is null means their no need to above operations hence we direclty return l2, same logic for l2 also.
7. and if value of l1 is lesser than value of l2 means we add l1 to ans and move l1 to next via merge next nodes.
8. else l2 value is lesser than l1 then we add l2 to ans and move l2 to next through merge next remaining nodes.
*/