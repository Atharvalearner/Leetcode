class Solution {
    public void solveSudoku(char[][] board) {
        if(board == null || board.length < 9){
            return;
        }
        solve(board);
    }
    public boolean solve(char[][] board) {
        int n = board.length;
        int row = -1;
        int col = -1;
        boolean emptyLeft = true;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == '.') {
                    row = i;
                    col = j;
                    emptyLeft = false;
                    break;
                }
            }
            //if you found some empty element in row, then break
            if (emptyLeft == false) {
                break;
            }
        }
        if (emptyLeft == true){     //if it is true then sudoku is solved
            return true;    
        }
        //backtrack
        for (char number = '1'; number <= '9'; number++) {
            if (isSafe(board, row, col, number)) {
                board[row][col] = number;
                if (solve(board)) { //if it is true then found the answer.
                    return true;    
                } else {    //backtrack
                    board[row][col] = '.';
                }
            }
        }
        return false;
    }
    public boolean isSafe(char[][] board,int row,int col,char c){
        //checking the row
        for(int i=0;i<board.length;i++){
            if(board[row][i]==c){   //checking the number is already present in the row or not
                return false;
            }
        }
        //checking the columns
        for(char[] nums: board){
            if(nums[col]==c){   //checking the number is already present in the column or not
                return false;
            }
        }
        int sqrt=(int)(Math.sqrt(board.length));
        int rowStart=row-row%sqrt;      // return starting row value of block
        int colStart=col-col%sqrt;      // return starting column value of block
        for(int r=rowStart;r<rowStart+sqrt;r++){
            for (int co = colStart; co < colStart + sqrt; co++) {
                if (board[r][co] == c) {
                    return false;
                }
            }
        }
    return true;
    }
}

/*
# Intuition :
Simple logical ans by placing the numbers in sudoku by checking it place in correct place.      -*- refer from **kunal Kushwaha***

# Approach :
1. **emptyLeft** only check whether the row coltains '.' or not ,if yes then we set emptyLeft as false and break.
2. we **backtrack** if placing the number is not in safe place by iterate through row and cloumn to check which numbers are present from 1 to 9.
3. then we place the number by checking 1st it place in safe place or not by checking in current row,colums and current block also.
4. we check the element is present in **3x3 block**, by calculating the starting co-ordinates of block by rowStart and colStart by some math:
    `rowStart = row- row % sqrt,  
     colStart = col - col % sqrt.`
then iterate the block from rowStart and colStart and check the number is prasent or not if yes then return false.

# Complexity :
- Time complexity:O(n!)
- Space complexity:O(n^2)
*/