class Solution {
    public int longestCommonPrefix(int[] arr1, int[] arr2) {
        HashMap<String, Integer> hm = new HashMap<>();
        for(int num : arr1){
            String curr = String.valueOf(num);
            String prefix = "";
            for(char ch : curr.toCharArray()){
                prefix = prefix + ch;
                hm.put(prefix, hm.getOrDefault(prefix, 0) + 1);
            }
        }
        int max = 0;
        for(int num : arr2){
            String curr = String.valueOf(num);
            String prefix = "";
            for(char ch : curr.toCharArray()){
                prefix = prefix + ch;
                if(hm.containsKey(prefix)){
                    max = Math.max(max, prefix.length());
                }
            }
        }
        return max;
    }
}

# Intuition :
The task requires finding the longest common prefix between elements of two arrays. We can treat each number as a string and extract common prefixes from these strings. We then compare the common prefixes of all pairs to determine the maximum length.

# Approach :
1. Convert each integer to a string: This allows us to compare the prefixes of numbers character by character.
2. Track prefixes using a hashmap: We'll store each prefix found in the first array along with its frequency in a hashmap. This helps in quick lookup for common prefixes.
3. Check for common prefixes in the second array: For each number in the second array, convert it to a string and compare its prefixes with those stored in the hashmap.
4. Maximize the length of common prefixes: As we find matching prefixes, we keep track of the maximum length.

# Complexity :
- Time : O(n⋅k+m⋅k)  ....where (n) is the length of arr1, (m) is the length of arr2, and (k) is the average number of digits in the integers.
- Space : O(n⋅k)  ....due to storing prefixes in the hashmap.

