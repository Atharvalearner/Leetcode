class Solution {
    public int findLengthOfShortestSubarray(int[] arr) {
        int left = 0, n = arr.length;
        while(left + 1 < n - 1 && arr[left] <= arr[left + 1]){
            left++;
        }
        if(left == n - 1){
            return 0;
        }
        int right = n - 1;
        while(right > 0 && arr[right] >= arr[right - 1]){
            right--;
        }
        int res = Math.min(n - left - 1, right);
        int i = 0, j = right;
        while(i <= left && j < n){
            if(arr[i] <= arr[j]){
                res = Math.min(res, j - i - 1);
                i++;
            }else{
                j++;
            }
        }
        return res;
    }
}

# Intuition :
1. We should look for any parts of the array that are already sorted and try to retain as much of that as possible.
2. If we have a long sorted prefix (from the start) and a long sorted suffix (from the end), we might only need to remove a small subarray in between to make the entire array sorted.
3. By focusing on these already sorted sections, we can potentially minimize the length of the subarray that needs to be removed.

# Approach :
1. Find the longest non-decreasing prefix from the beginning of the array. Let's call this left. This gives us the starting part of the array that’s already sorted.
2. Find the longest non-decreasing suffix from the end of the array. Let's call this right. This gives us the ending part of the array that’s already sorted.
3. Check if the entire array is sorted by verifying if left spans the whole array. If so, the answer is 0 because we don't need to remove anything.
4. Calculate minimum removal: Initially, consider removing either the entire suffix (n - left - 1 elements) or the entire prefix (right elements).
Use a two-pointer technique to see if we can merge parts of the prefix and suffix by skipping the smallest possible middle section. This allows us to explore shorter subarrays to remove.
5. Return the result which is the minimum number of elements we need to remove.

# Complexity :
- Time : O(N)
- Space : O(1)