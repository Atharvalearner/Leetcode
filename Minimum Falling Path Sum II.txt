class Solution {
    public int minFallingPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];     // fill this matrix with zeroes
        for(int row = 0; row < n; row++){
            for(int col = 0; col < m; col++){
                dp[row][col] = -1;          // set all cells as -1 before calculation.
            }
        }
        int min = isValid(grid, dp, 0, -1); // return minimum sum.
        return min;
    }
    public int isValid(int[][] grid,int[][] dp, int currRow,int prevCol){
        if(currRow == grid.length){         // if current row is equal to grid length means we cannot iterate further hence return 0.
            return 0;
        }
        if(prevCol != -1 && dp[currRow][prevCol] != -1){    // if our previous column is not -1 and current cell is also not -1 that means the previous element is already filled then return the value of that element.
            return dp[currRow][prevCol];
        }
        int ans = Integer.MAX_VALUE;;   
        for(int col = 0; col < grid.length; col++){
            if(col == prevCol){     // if current column and previous column is same then we skip current column.
                continue;
            }
            int currMin = grid[currRow][col] + isValid(grid,dp,currRow+1,col);  // else we add current cell value with next row valid cell with min value.
            ans = Math.min(ans,currMin);    // update minimum sum value among ans and current minimum value.
        }
        if(prevCol != -1){      // if previous column is -1 means we cannot iterate it hence set current value as ans.
            dp[currRow][prevCol] = ans;
        }
        return ans;
    }
}