class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        int k = nums.size();
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < k; ++i) {
            pq.offer(new int[] {nums.get(i).get(0), i, 0});
            max = Math.max(max, nums.get(i).get(0));
        }
        int start = 0, end = Integer.MAX_VALUE;
        while (!pq.isEmpty()) {
            int[] currNum = pq.poll();
            int minValue = currNum[0], currNumRow = currNum[1], currNumCol = currNum[2];
            if (max - minValue < end - start) {
                start = minValue;
                end = max;
            }
            if (currNumCol + 1 < nums.get(currNumRow).size()) {
                pq.offer(new int[] {nums.get(currNumRow).get(currNumCol + 1), currNumRow, currNumCol + 1});
                max = Math.max(max, nums.get(currNumRow).get(currNumCol + 1));
            } else {
                break;
            }
        }
        return new int[] {start, end};
    }
}

# Intuition :
The key idea is to leverage the fact that all lists are sorted, which allows us to maintain a current range using one element from each list. By utilizing a min-heap (priority queue), we can always pick the smallest element across the lists. The challenge is to minimize the difference between the smallest and largest elements in the current range while making sure the range includes elements from all lists.

# Approach :
1. Min-Heap: We use a min-heap to keep track of the smallest element in the current range.
2. Track the maximum element: At every step, track the largest element in the current range to compute the smallest possible range.
3. Expand the range: Extract the smallest element from the heap and replace it with the next element from the same list, updating the range.
4. Stop condition: Once any of the lists is exhausted (i.e., there are no more elements to consider), the process stops.

# Complexity :
- Time : (O(n / log k))   ...where (n) is the total number of elements across all lists and (k) is the number of lists. This is because we process every element and use a heap, which takes (O(\log k)) time for insertions and deletions.
- Space : (O(k))    ...where (k) is the number of lists, as the heap contains one element from each list at any point in time.