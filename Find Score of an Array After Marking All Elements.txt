class Solution {
    public long findScore(int[] nums) {
        int n = nums.length;
        long score = 0;
        int[][] dp = new int[n][2];
        for(int i = 0; i < n; i++){
            dp[i][0] = nums[i];
            dp[i][1] = i;
        }
        Arrays.sort(dp, (a,b) -> (a[0] - b[0]));
        boolean[] mark = new boolean[n];
        for(int[] curr : dp){
            int ele = curr[0];
            int index = curr[1];
            if(mark[index] == false){
                score += ele;
                mark[index] = true;
                if(index > 0){
                    mark[index - 1] = true;
                }
                if(index < n - 1){
                    mark[index + 1] = true;
                }
            }
        }
        return score;
    }
}

# Intuition :
maximizing the score by marking the smallest unmarked elements and their neighbors. Sorting the array allows us to process elements in ascending order, ensuring the smallest is always chosen first.

# Approach :
1. Pair elements with indices using 2d Array: Create a 2D array to pair each element with its original index for easy marking.
2. Sort by values: Sort the array based on element values to process smallest elements first.
3. Mark neighbors: Use a boolean array to track marked elements. When marking an element, also mark its neighbors (if they exist) left and right.
4. Update score: Add the value of the chosen element to the score and continue until all elements are marked.

# Complexity :
- Time : O(N log N)
- Space : O(N)