class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        List<List<Integer>> res = new ArrayList<>();
        HashSet<Integer> hs1 = new HashSet<>();
        HashSet<Integer> hs2 = new HashSet<>();
        for(int num : nums1){
            hs1.add(num);
        } 
        for(int num : nums2){
            hs2.add(num);
        }
        res.add(new ArrayList<>());
        res.add(new ArrayList<>());
        for(int num : hs1){
            if(!hs2.contains(num)){
                res.get(0).add(num);
            }
        }
        for(int num : hs2){
            if(!hs1.contains(num)){
                res.get(1).add(num);
            }
        }
        return res;
    }
}

# Approach :
1. First create 2 sets. Then add nums1 elements to set1, and nums2 to set2.This will give us 2 sets with unique elements only.
2. Now,  just iterate to all elements of set1 and add those elements to first sublist of result list, which are not in set2.
3. Similarly, iterate to all elements of set2 and add those elements to second sublist of result list, which are not in set1.
4. Now, we got our result list.

# Complexity : 	
- Time : O(n)  ...n is length of input array with bigger length
- Space : O(m) ...m is size of hashset with bigger length