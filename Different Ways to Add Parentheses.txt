class Solution {
    private boolean isOperator(char ch) {
        return (ch == '+' || ch == '-' || ch == '*');
    }

    private List<Integer> getDiffWays(int i, int j, Map<String, List<Integer>> dp, String expression) {
        String key = i + "-" + j;

        // Return cached result if already calculated
        if (dp.containsKey(key)) {
            return dp.get(key);
        }

        // If length of the substring is 1 or 2
        // we encounter our base case i.e. a number found.
        int len = j - i + 1;
        if (len <= 2) {
            List<Integer> result = new ArrayList<>();
            result.add(Integer.parseInt(expression.substring(i, j + 1)));
            dp.put(key, result);
            return result;
        }

        // If it is not a number then it is an expression
        // now we try to evaluate every operator present in it
        List<Integer> res = new ArrayList<>();
        for (int ind = i; ind <= j; ind++) {
            if (isOperator(expression.charAt(ind))) {
                char op = expression.charAt(ind);

                // if char at ind is an operator 
                // get all results for its left and right substring using recursion
                List<Integer> left = getDiffWays(i, ind - 1, dp, expression);
                List<Integer> right = getDiffWays(ind + 1, j, dp, expression);

                // try all options for left & right operand
                // and push all results to the answer
                for (int l : left) {
                    for (int r : right) {
                        if (op == '+') {
                            res.add(l + r);
                        } else if (op == '-') {
                            res.add(l - r);
                        } else if (op == '*') {
                            res.add(l * r);
                        }
                    }
                }
            }
        }
        dp.put(key, res);
        return res;
    }

    public List<Integer> diffWaysToCompute(String expression) {
        Map<String, List<Integer>> dp = new HashMap<>();
        return getDiffWays(0, expression.length() - 1, dp, expression);
    }
}

# Intuition :
we observe overalapping subproblems that gets calculated again & again. We can avoid this by introducing a 3D DP array / cache & storing the results we calculate so that we don't need to process same stuff again & again.

# Complexity :
- Time : O(3 ^ N)
- Space : O(N ^ 3)