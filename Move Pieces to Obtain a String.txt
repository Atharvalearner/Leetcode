class Solution {
    public boolean canChange(String start, String target) {
        int i = 0, j = 0, n = start.length();
        while(i < n || j < n){
            while(i < n && start.charAt(i) == '_'){
                i++;
            }
            while(j < n && target.charAt(j) == '_'){
                j++;
            }
	    // if both i and j reach end of string
            if(i == j && i == n){
                return true;
            }
            if(i == n || j == n || start.charAt(i) != target.charAt(j)){
                return false;
            }
	    // if characters at both i and j are equal, check their relative positions in both start and target
            if((target.charAt(j) == 'L' && i < j) || (target.charAt(j) == 'R' && i > j)){
                return false;
            }
            i++;
            j++;
        }
        return true;
    }
}

# Approach :
Just traverse both the strings and check whether relative charcters ('R' or 'L') are equal or not, if they are equal, then check their relative positions to see whether start can be converted to target or not
e.g. '-R' and 'R-' => here, relative characters 'R' and 'R' are equal but index of 'R' in start is greater than index of 'R' in target, since 'R' can't move left, hence we return false for this test case

# Complexity :
- Time : O(N)
- Space : O(1)