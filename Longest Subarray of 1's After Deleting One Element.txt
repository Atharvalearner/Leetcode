class Solution {
    public int longestSubarray(int[] nums) {
        int zeros = 0, max = 0, left = 0;
        for(int right = 0; right < nums.length; right++){
            int curr = nums[right];
            if(curr == 0){
                zeros++;
            }
            while(zeros > 1){
                if(nums[left] == 0){
                    zeros--;
                }
                left++;
            }
            max = Math.max(max, right - left + 1 - zeros);
        }
        return (max == nums.length) ? max - 1 : max;
    }
}

# Approach :
1. The variable left represents the left pointer of the sliding window, which defines the subarray.
2. The variable zeros keeps track of the number of zeroes encountered in the current subarray.
3. The variable ans stores the maximum length of the subarray found so far.
4. The code iterates over the array using the right pointer right.
	- If nums[right] is 0, it means we encountered a zero in the array. We increment zeros by 1.
	- The while loop is used to adjust the window by moving the left pointer left to the right until we have at most one zero in the subarray.
	- If nums[left] is 0, it means we are excluding a zero from the subarray, so we decrement zeros by 1.
	- We update the left pointer by moving it to the right.
5. After adjusting the window, we calculate the length of the current subarray by subtracting the number of zeroes from the total length right - left + 1. We update ans if necessary.
6. Finally, we check if the entire array is the longest subarray. If it is, we subtract 1 from the maximum length to account for the one element we are allowed to delete. We return the resulting length.

# Complexity : 
- Time : O(N)
- Space : O(1)