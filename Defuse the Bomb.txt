class Solution {
    public int[] decrypt(int[] code, int k) {
        int n = code.length;
        int[] res = new int[n];
        if(k == 0){		// if k is 0, means all numbers sum in code array is 0, hence return array res directly.
            return res;
        }
        for(int i = 0; i < n; i++){
            if(k > 0){		// if k is positive then we iterate next k indexes of code array and add elements current ith index of res.
                for(int j = 0; j < k; j++){
                    res[i] += code[(i + j + 1) % n]; 
                }
            }else{		// else k is negative hence we first make it positive by k = -k, then iterate next k elements of code array and add elements to current ith index of res.
                for(int j = 0; j < -k; j++){
                    res[i] += code[(i - j  - 1 + n) % n];
                }
            }
        }
        return res;
    }
}

# Complexity :
- Time : O(N*2)
- Space : O(N)