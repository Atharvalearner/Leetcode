class Solution {
    String smallestString = null;
    public String smallestFromLeaf(TreeNode root) {
        dfs(root,new StringBuilder());
        return smallestString;
    }
    public void dfs(TreeNode root,StringBuilder currString){
        if(root == null){
            return;
        }
        currString.insert(0,(char)('a' + root.val));	// it converts current node value to character and appends it to current string.
        if(root.left == null && root.right == null){	// if we reach at leaf node then we update smallest string by checking it where current string is smaller as campared to smallest string it yes then we upadte it.
            updateSmallestStr(currString.toString());
        }else{						// else we iterate to left and right.
            dfs(root.left,currString);
            dfs(root.right,currString);
        }
        currString.deleteCharAt(0);			// we remove the appended character from current string.
    }
    public void updateSmallestStr(String currString){
        if(smallestString == null || currString.compareTo(smallestString) < 0){
            smallestString = currString;
        }
    }
}

# Approach :
1. smallestFromLeaf: This method initiates the depth-first search (DFS) traversal of the tree to find the smallest string from leaf to root. It then returns the smallest string found.
2. dfs: This is a recursive method that performs depth-first traversal of the tree. It appends characters corresponding to node values to the currentString, starting from leaf nodes up to the root. Whenever a leaf node is reached, it updates the smallestString if the current string formed is smaller. Remember, this method modifies currentString in-place, so take care of its state while traversing.
3. updateSmallestString: This method updates the smallestString if the current string passed as an argument is smaller than the current smallest string found.

# Complexity :
- Time : O(N)
- Space : O(N)