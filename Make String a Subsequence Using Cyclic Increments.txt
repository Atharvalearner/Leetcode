class Solution {
    public boolean canMakeSubsequence(String str1, String str2) {
        int i = 0, j = 0;
        while(i < str1.length() && j < str2.length()){
            char c1 = str1.charAt(i);
            char c2 = str2.charAt(j);
            if(c1 == c2 || c1 + 1 == c2 || (c1 == 'z' && c2 == 'a')){
                i++;
                j++;
            }else{
                i++;
            }
        }
        return j == str2.length() ? true : false;
    }
}

# Intuition :
Check if s2 is substring of increment of s1.
s1[i] is the current char to match.
s2[j] is the character is s2 need to be matched.

Each time, we check if one of s1[i] ,s1[i] + 1, s1[i] == 'z' && s2[j] == 'a'
equals to s2[j].
If any one of condition is match means we met the given constraint, then we just move to next indices by increment both i and j pointers.

If they don't,
s1[i] isn't used in the subsequence,
s2[j] still need to be matched,
we only incremnt i.

# Complexity :
- Time : O(N)
- Space : O(1)