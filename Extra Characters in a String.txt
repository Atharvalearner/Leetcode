class Solution {
    public int minExtraChar(String s, String[] dictionary) {
        Set<String> hs = new HashSet<>();
        int n = s.length() + 1;
        int[] dp = new int[n];
        Arrays.fill(dp, n);
        dp[0] = 0;
        for(String str : dictionary){
            hs.add(str);
        }
        for(int left = 1; left <= s.length(); left++){
            dp[left] = dp[left - 1] + 1;
            for(int right = 1; right <= left; right++){
                if(hs.contains(s.substring(left - right, left))){
                    dp[left] = Math.min(dp[left], dp[left - right]);
                }
            }
        }
        return dp[s.length()];
    }
}

# Intuition :
The idea here is to use the Dynamic Programming array dp to store the minimum number of extra characters needed when the string is broken up optimally up to index i.

# Explanation
1. Initialization: Create an array dp of length |s| + 1, initialized with a large value (larger than the maximum possible extra characters). Set dp[0] = 0.
2. Iterate through the string from 1 to |s|.
3. For each i, set dp[i] = dp[i-1] + 1 as a worst-case scenario.
4. Update dp[i] based on substrings of s ending at i that are in the dictionary. Use dp[i - len(substring)] for this.

# Complexity :
- Time : O(n^2)  ....We iterate through the string and for each character, we consider all substrings ending at that character.
- Space : O(n)   ....For the DP array.