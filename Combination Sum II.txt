class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        if(candidates.length == 0){
            return res;
        }
        Arrays.sort(candidates);
        dfs(candidates, target, 0, new ArrayList<>(), res);
        return res;
    }
    private void dfs(int[] candidates, int target, int left, List<Integer> ans, List<List<Integer>> res){
        if(target == 0){
            res.add(new ArrayList<>(ans));
            return;
        }
        for(int right = left; right < candidates.length; right++){
            if(right > left && candidates[right] == candidates[right - 1]){
                continue;
            }
            if(candidates[right] > target){
                break;
            }
            ans.add(candidates[right]);
            dfs(candidates, target - candidates[right], right + 1, ans, res);
            ans.remove(ans.size() - 1);
        }
    }
}

# Complexity :
- Time : O(2 ^ N)
- Space : O(N)