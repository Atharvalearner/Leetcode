class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<>();
        StringBuilder sb = new StringBuilder("");
        traverse(root,sb,res);
        return res;
    }
    public void traverse(TreeNode root,StringBuilder sb,List<String> res){
        if(root == null){
            return;
        }
        int len = sb.length();      // track of sb length
        sb.append(root.val);        // add the current node value to sb.
        if(root.left == null && root.right == null){      // if left and right of current root is null means it is leaf node hence, convert whole sb to string.  
            res.add(sb.toString());
        }else{                      // else we are in middle of tree hence, we print -> and traverse root in left and right.
            sb.append("->");        
            traverse(root.left,sb,res);
            traverse(root.right,sb,res);
        }
        sb.setLength(len);      // set length, append the string to the string builder
    }
}

# Approach :
1. using StringBuilder, We can just keep track of the length of the StringBuilder 
2. before we append anything to it before recursion and afterwards set the length back.
3. when to append the "->", since we don't need the last arrow at the end of the string, we only append it before recurse to the next level of the tree.

# Complexity :
- Time complexity:O(n)