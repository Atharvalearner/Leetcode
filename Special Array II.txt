class Solution {
    public boolean[] isArraySpecial(int[] nums, int[][] queries) {
        int n = queries.length;
        boolean[] res = new boolean[n];
        int[] prefix = new int[nums.length];
        for(int i = 1; i < nums.length; i++){
            prefix[i] = prefix[i - 1];
            if(nums[i] % 2 == nums[i - 1] % 2){
                prefix[i]++;
            }
        }
        int i = 0;
        for(int[] query : queries){
            int start = query[0];
            int end = query[1];
            int count = prefix[end] - prefix[start];
            res[i++] = count > 0 ? false : true;
        }
        return res;
    }
}

# Intuition :
The problem checks if subarrays have all elements alternating in parity. A prefix sum array tracks consecutive same-parity pairs. For each query, if such pairs exist in the range, it returns false; otherwise, it returns true.

# Approach :
1. ps is a prefix sum array where ps[i] counts pairs of consecutive elements with the same parity up to index i.
Loop through the nums array starting from index 1.
2. For each element, copy the previous prefix sum (ps[i] = ps[i - 1]).
3. If the current element and the previous element have the same parity (both even or both odd), increment the prefix sum (ps[i]++).
4. Loop through each query.
5. Extract the from and to indices from the query.
6. Calculate the count of consecutive pairs with the same parity in the range by subtracting the prefix sums (cnt = ps[to] - ps[from]).
7. If cnt is greater than 0, it means there are pairs with the same parity, so set the result to false.
Otherwise, set the result to true.

# Complexity :
- Time : O(n + q)
- Space : O(n)