class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root == null){
            return null;
        }        
        if(root.val < key){
            root.right = deleteNode(root.right,key);
        }else if(root.val > key){
            root.left = deleteNode(root.left,key);
        }else{
            if(root.left == null && root.right == null){
                return null;
            }
            if(root.left == null){
                return root.right;
            }else if(root.right == null){
                return root.left;
            }
            TreeNode temp = findLeftSmallest(root.right);
            root.val = temp.val;
            root.right = deleteNode(root.right, temp.val);
        }
        return root;
    }
    private TreeNode findLeftSmallest(TreeNode root){
        while(root.left != null){
            root = root.left;
        }
        return root;
    }
}

# Intuition :
This code implements a recursive approach to delete a node with a given key from a binary search tree (BST). It handles cases where the node to be deleted has zero, one, or two children by appropriately reconnecting the tree. It ensures that the BST property is maintained after deletion by finding and updating the node with the smallest value in the right subtree as the replacement node.

# Approach :
1. Initialize a recursive function to delete a node from the BST based on the given key.
2. Search for the node with the given key by recursively traversing the tree. Determine the appropriate action based on the node's existence and the specified key.
3. Handle different cases:
	a. If the node is a leaf (no children), simply remove it by returning null.
	b. If the node has one child, connect the child directly to its parent by returning the child node.
	c. If the node has two children, find the in-order successor, copy its value to the current node, and recursively delete the in-order successor.
4. Ensure that the BST property is maintained throughout the deletion process by properly reconnecting the nodes in the tree.
5. Return the root of the updated BST after the deletion process is complete.