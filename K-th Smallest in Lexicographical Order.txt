class Solution {
    public int findKthNumber(int n, int k) {
        int curr = 1;  // Start with the first number (lexicographically smallest)
        k--;           // We're starting with `1`, so decrement k by 1 initially

        while (k > 0) {
            // Calculate the steps between curr and curr + 1 in the lexicographical tree
            int steps = countSteps(n, curr, curr + 1);

            if (steps <= k) {
                // If the number of steps is less than or equal to k, move to the next sibling
                curr++;
                k -= steps;
            } else {
                // Otherwise, go deeper into the tree (lexicographically smaller)
                curr *= 10;
                k--;  // We've counted the current number
            }
        }
        return curr;
    }

    // Helper function to calculate the number of steps between curr and curr + 1
    private int countSteps(int n, long curr, long next) {
        int steps = 0;
        while (curr <= n) {
            steps += Math.min(n + 1, next) - curr;
            curr *= 10;
            next *= 10;
        }
        return steps;
    }
}

# Complexity :
- Time : O(log N)
- Space : O(1)