class Solution {
    public int numTrees(int n) {
        if(n == 0 || n == 1){
            return 1;
        }
        int count = 0;
        for(int i = 1; i <= n; i++){
            count = count + numTrees(i-1) * numTrees(n - i);
        }
        return count;
    }
}

# Intuition :
Particularly, consider two base cases when i = 1 and i = 2,
i = 1: F(1, n) = G(0) x G(n - 1). The empty left subtree is still a subtree, so G(0) = 1.
i = 2: F(2, n) = G(1) x G(n - 2). With one node we can only construct one unique left subtree, so G(1) = 1.

# Dry Run : 
Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

# Complexity :
- Time : O(2 ^ N)
- Space : O(N)