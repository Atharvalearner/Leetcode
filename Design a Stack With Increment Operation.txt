class CustomStack {
    int max = 0;
    Stack<Integer> stack = new Stack<>();
    public CustomStack(int maxSize) {
        max = maxSize;
    }
    public void push(int x) {
        if(stack.size() != max){
            stack.push(x);
        }
    }
    public int pop() {
        if(stack.size() > 0){
            return stack.pop();
        }else{
            return -1;
        }
    }
    public void increment(int k, int val) {
        Stack<Integer> stack2 = new Stack<>();
        while( !stack.isEmpty()){
            stack2.push(stack.pop());
        }
        for(int i=0;i<k;i++){
            if(stack2.size() == 0){
                break;
            }
            stack.push(stack2.pop() + val);
        }
        while(stack2.size() != 0){
            stack.push(stack2.pop());
        }
    }
}

# Approach :
1. customStack connot initializes new stack hence we take max variable which stores maxSize.
2. we push the elements until stack size is not equal to max.
3. we pop the top element form stack and return it, if stack becomes empty then return -1.
4. we take stack2 for performing increment operation.
5. we pop the elements from stack and push it to stack2.
6. then pop the elements form stack2 and add val to it and push it into stack.
7. if stack2 size is 0 means their is no element is present then break.