class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null){
            return true;
        }
        return recursive(root.left,root.right);
    }
    public boolean recursive(TreeNode leftR,TreeNode rightR){
        if(leftR == null && rightR == null){
            return true;
        }
        if((leftR == null && rightR != null) || (leftR != null && rightR == null)){
            return false;
        }
        if(leftR.val != rightR.val){
            return false;
        }
        return recursive(leftR.left,rightR.right) && recursive(leftR.right,rightR.left);
    }
}

# Approach :
1. Define a function "isTreeSymmetric" that takes in two TreeNode pointers as inputs, "leftRoot" and "rightRoot"
2. If both "leftRoot" and "rightRoot" are null, return true
3. If only one of "leftRoot" or "rightRoot" is null, return false
4. If "leftRoot" and "rightRoot" are not null and their values are not equal, return false
5. If "leftRoot" and "rightRoot" are not null and their values are equal, recursively call "isTreeSymmetric" on the left child of "leftRoot" and the right child of "rightRoot", and the right child of "leftRoot" and the left child of "rightRoot"
6. Return true if both recursive calls return true, else return false
7. Define a function "isSymmetric" that takes in a TreeNode pointer "root" as input
8. Call "isTreeSymmetric" on the left child of "root" and the right child of "root" and return the result

# Complexity :
- Time complexity:O(n),   where n is number of nodes in binary tree.
- Space complexity:O(h),   where h is height of tree. 