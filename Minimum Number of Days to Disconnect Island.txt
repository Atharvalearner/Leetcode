class Solution {
    public int minDays(int[][] grid) {
        if(countNoOfIslands(grid) != 1){
            return 0;
        }
        int n = grid.length;
        int m = grid[0].length;
        for(int row = 0; row < n; row++){
            for(int col = 0; col < m; col++){
                if(grid[row][col] == 1){
                    grid[row][col] = 0;
                    if(countNoOfIslands(grid) != 1){
                        return 1;
                    }
                    grid[row][col] = 1;
                }
            }
        }
        return 2;
    }
    private int countNoOfIslands(int[][] grid){
        int count = 0;
        int n = grid.length;
        int m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        for(int row = 0; row < n; row++){
            for(int col = 0; col < m; col++){
                if(grid[row][col] == 1 && !visited[row][col]){
                    count++;
                    isIsland(grid, row, col, visited);
                }
            }
        }
        return count;
    }
    private void isIsland(int[][] grid, int row, int col, boolean[][] visited){
        if(row < 0 || col < 0 || row == grid.length || col == grid[0].length || visited[row][col] == true || grid[row][col] == 0){
            return;
        }
        visited[row][col] = true;
        isIsland(grid, row+1, col, visited);
        isIsland(grid, row-1, col, visited);
        isIsland(grid, row, col+1, visited);
        isIsland(grid, row, col-1, visited);
    }
}

# Complexity :
- Time : O(N * M)
- Space : O(N * M)