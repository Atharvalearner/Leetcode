class Solution {
    public TreeNode removeLeafNodes(TreeNode root, int target) {
        if(root == null){
            return null;
        }
        root.left = removeLeafNodes(root.left,target);
        root.right = removeLeafNodes(root.right,target);
        if(root.left == null && root.right == null && root.val == target){
            return null;
        }        
        return root;
    }
}

# Approach :
1. Traverse the tree using a post-order ( left -> right -> root ) depth-first search.
2. At each node, first recursively process the left and right children.
3. After processing children, check if the node itself is now a leaf and also the target if yes then return it as null.

# Complexity :
- Time : O(N)
- Space : O(h)

# Dry run :
Initial Tree:
        1
      /   \
     2     3
    /     / \
   2     2   4
   
Step-by-Step Deletion:
1. Traverse to [2 (leaf with value = 2)], delete.
        1
      /   \
     2     3
    /     / \
  null   2   4

2. Now, [2 (leaf with value = 2)], delete.
        1
      /   \
     2     3
    /     / \
  null  null  4

3. Finally, [2 (leaf with value = 2)], delete.
        1
      /    \
  null     3
         /   \
       null   4

Final Tree:
   1
    \
     3
      \
       4