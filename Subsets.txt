class Solution {
    List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> subsets(int[] nums) {
        List<Integer> ans = new ArrayList<>();
        helper(ans,nums,0);
        return res;
    }
    public void helper(List<Integer> ans,int[] nums,int currIndex){
        if(currIndex == nums.length){
            res.add(new ArrayList<>(ans));
            return;
        }
        ans.add(nums[currIndex]);		// recursive case 
        helper(ans,nums,currIndex + 1);		// choice 1: include the current element
        ans.remove(ans.size() - 1);		// backtracking step
        helper(ans,nums,currIndex + 1);		// choice 2: exclude the current element
    }
}

/*
# Intuition :
While iterating through all numbers, for each new number, we can either pick it or not pick it.

# Approach :
1, if pick, just add current number to every existing subset.
2, if not pick, just leave all existing subsets as they are.
We just combine both into our result.

    For example, {1,2,3} intially we have an emtpy set as result [ [ ] ]
    Considering 1, if not use it, still [ ], if use 1, add it to [ ],   so we have [1] now
    Combine them, now we have [ [ ], [1] ] as all possible subset

    Next considering 2, if not use it, we still have [ [ ], [1] ], if use 2, just add 2 to each previous subset, we have [2], [1,2]
    Combine them, now we have [ [ ], [1], [2], [1,2] ]

    Next considering 3, if not use it, we still have [ [ ], [1], [2], [1,2] ], if use 3, just add 3 to each previous subset, we have [ [3], [1,3], [2,3], [1,2,3] ]
    Combine them, now we have [ [ ], [1], [2], [1,2], [3], [1,3], [2,3], [1,2,3] ]

# Complexity :
- Time complexity: O(2^n)
- Space complexity: O(2^n)
*/