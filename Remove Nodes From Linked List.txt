class Solution {
    public ListNode removeNodes(ListNode head) {
        if(head == null){
            return null;
        }
        ListNode node = head;
        ListNode nextNode = removeNodes(head.next);
        node.next = nextNode;
        if(nextNode == null || node.val >= nextNode.val){
            return node;
        }
        return nextNode;
    }
}

# Intuition:
We can use recursion to traverse the linked list and at each step, we compare the current node's value with the value of the nextNode node. If the nextNode node has a value less than the current node, we keep the current node; otherwise, we skip the current node.

# Approach:
1. Recursively traverse the linked list.
2. At each step, compare the current node's value with the value of the nextNode node.
3. If the nextNode node has a value less than the current node, keep the current node; otherwise, skip the current node.
Return the head of the modified linked list.

# Complexity:
- Time complexity: O(n), where n is the number of nodes in the linked list.
- Space complexity: O(n), due to the recursive stack space.