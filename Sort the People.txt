class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        String[] res = new String[names.length];
        Map<Integer, String> map = new HashMap<>();
        for(int i = 0; i < names.length; i++){
            map.put(heights[i], names[i]);
        }
        Arrays.sort(heights);
        int index = 0;
        for(int i = heights.length - 1; i >= 0; i--){
            res[index++] = map.get(heights[i]);
        }
        return res;
    }
}

# Approach :
1. Create an map (hash map) that associates each height with its corresponding name. This allows for O(1) average time complexity for lookups.
2. Sort the heights in ascending order using the built-in sort function. This step has a time complexity of O(n log n).
3. Initialize an empty result array to hold the sorted names.
4. Iterate through the sorted list of heights in reverse order (to achieve descending order) and use the height-to-name mapping to place the result array.
5. Finally, return the array containing names sorted by height in descending order.

# Complexity :
- Time : O(N log N)
- Space : O(N)