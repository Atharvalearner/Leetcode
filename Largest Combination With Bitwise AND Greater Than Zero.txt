class Solution {
    public int largestCombination(int[] candidates) {
        int res = 0;
        for(int i = 0; i < 32; i++){
            int count = 0;
            for(int currCand : candidates){
                if((currCand & (1 << i)) != 0){
                    count++;
                }
            }
            res = Math.max(res, count);
        }
        return res;
    }
}

# Intuition :
This problem doesnâ€™t require finding all combinations directly. Instead, it relies on analyzing how many numbers can share at least one common bit set to 1.
For each bit position, count how many numbers have that specific bit set to 1. This tells you the maximum possible subset of numbers that could share a common 1 in that bit position.

# Approach :
1. Initialize Variables: We start by defining a variable ans to store the maximum count of elements that share the same bit position with a bit set to 
2. Iterate Over Bit Positions: Since integers are 32 bits in length, we loop from 0 to 31 to cover all possible bit positions.
3. Count Set Bits for Each Position:
	- For each bit position i (from 0 to 31), we count how many elements in candidates have that specific bit set to 1.
		
		16      1 0 0 0 0
		17      1 0 0 0 1
		71  1 0 0 0 1 1 1
		62    1 1 1 1 1 0
		12        1 1 0 0
		24      1 1 0 0 0
		14        1 1 1 0
        		^
	- To check if the i-th bit of a number candidate is set, we use the expression candidate & (1 < < i).
	- 1 << i shifts 1 to the i-th bit position, creating a mask (like 00010000 for i = 4).
	- candidate & (1 << i) checks if this bit is set by applying the mask; if the result is non-zero, then this bit is set in candidate.
4. Update Maximum Count: After counting the elements with the i-th bit set, we update ans to hold the maximum of ans and cnt.
5. Return the Result: After iterating over all bit positions, ans holds the largest combination of elements with a common set bit, which is
returned as the answer.

# Complexity :
- Time : O(n * 32)  ....where n is the size of candidates
- Space : 0(1)