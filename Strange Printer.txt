class Solution {
    public int strangePrinter(String s) {
        Map<String,Integer> memo = new HashMap<>();
        return min_turns(s, 0, s.length() - 1, memo);
    }
    private int min_turns(String s, int start, int end, Map<String, Integer> memo){
        if(start > end){
            return 0;
        }
        String key = start + " " + end;
        if(memo.containsKey(key)){
            return memo.get(key);
        }
        int res = min_turns(s, start, end - 1, memo) + 1;
        for(int i = start; i < end; i++){
            if(s.charAt(i) == s.charAt(end)){
                res = Math.min(res, min_turns(s, start, i, memo) + min_turns(s, i + 1, end - 1, memo));
            }
        }
        memo.put(key, res);
        return res;
    }
}


# Intuition :
The main idea of this algorithm is to recursively divide the string into smaller subproblems and use memoization to avoid redundant calculations. By considering all possible break points, we can find the optimal way to print the string with the minimum number of turns.

# Approach :
1. Initialize an empty dictionary memo to store the results of subproblems for memoization.
2. Define a recursive function min_turns_to_print(start, end) that calculates the minimum number of turns needed to print the substring s[start:end+1].
3. In the min_turns_to_print function:
	a. Base case: If start is greater than end, there are no characters to print, so return 0 turns.
	b. Check if the result for the current subproblem (start, end) is already memoized in memo. If yes, return the memoized result to avoid redundant computations.
	c. Initialize the minimum number of turns res for the current subproblem by assuming that the last character s[end] is printed separately. Therefore, res = min_turns_to_print(start, end - 1) + 1.

4. Try to improve the minimum turns res by considering all possible break points (middle) between start and end - 1. For each middle:
	a. If the character at s[middle] is the same as the character at s[end], it means that we can potentially print the substring s[start:end+1] in a single operation. In this case, try to combine the turns needed to print s[start:middle] and s[middle+1:end] separately. Calculate min_turns_to_print(start, middle) + min_turns_to_print(middle + 1, end - 1).
	b. Update res to be the minimum of the current res and the value calculated in the previous step, i.e., res = min(res, min_turns_to_print(start, middle) + min_turns_to_print(middle + 1, end - 1)).

5. Memoize the result res for the current subproblem (start, end) in the memo dictionary, so that we can use it for future computations.
6. Return the minimum number of turns needed to print the entire string s, which is the result of calling min_turns_to_print(0, len(s) - 1).

# Complexity :
- Time : O(N^3)
- Space : O(N^2)