class Solution {
    public int maxScoreWords(String[] words, char[] letters, int[] score) {
        // Step 1: Count the available letters
        Map<Character, Integer> lettersCounter = new HashMap<>();
        for (char letter : letters) {
            lettersCounter.put(letter, lettersCounter.getOrDefault(letter, 0) + 1);
        }

        // Step 2: Initialize the totalScore
        int[] totalScore = new int[1];

        // Step 3: Define the recursive function to explore all combinations
        explore(words, lettersCounter, score, 0, 0, totalScore);

        // Step 4: Return the maximum score found
        return totalScore[0];
    }

    private void explore(String[] words, Map<Character, Integer> letterCounter, int[] score, int index, int currScore,
            int[] totalScore) {
        // Update the total score with the current score if it's higher
        totalScore[0] = Math.max(totalScore[0], currScore);

        // Base case: if all words have been considered, return
        if (index == words.length) {
            return;
        }

        // Step 3: Try each word starting from the current index
        for (int i = index; i < words.length; i++) {
            Map<Character, Integer> tmpCounter = new HashMap<>(letterCounter);
            String word = words[i];
            int wordScore = 0;
            boolean isValid = true;

            // Check if the word can be formed with the available letters
            for (char ch : word.toCharArray()) {
                if (tmpCounter.getOrDefault(ch, 0) > 0) {
                    tmpCounter.put(ch, tmpCounter.get(ch) - 1);
                    wordScore += score[ch - 'a'];
                } else {
                    isValid = false;
                    break;
                }
            }

            // If the word can be formed, explore further with the updated state
            if (isValid) {
                explore(words, tmpCounter, score, i + 1, currScore + wordScore, totalScore);
            }
        }
    }
}

# Complexity :
- Time : O(2 ^ N * N * L) ..... where L is the average length of the word
- Space : O(N)

# Explanation :
Words: ["dog", "cat", "dad", "good"]
Letters: ["a", "a", "c", "d", "d", "d", "g", "o", "o"]
Score: [1, 0, 9, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Recursive Exploration
Initialization:
- Count of letters: {'a': 2, 'c': 1, 'd': 3, 'g': 1, 'o': 2}
- Total score initialized to 0

- Index 0 (Word: "dog"):
"dog" can be formed using {'d': 1, 'o': 1, 'g': 1}.
Score: 5 + 0 + 3 = 8.
New state: {'a': 2, 'c': 1, 'd': 2, 'g': 0, 'o': 1} and score 8.

- Index 1 (Word: "cat"):
"cat" cannot be formed (not enough 'c').
Skip and move to the next word.

- Index 2 (Word: "dad"):
"dad" can be formed using {'d': 2, 'a': 1}.
Score: 5 + 1 + 5 = 11.
New state: {'a': 1, 'c': 1, 'd': 1, 'g': 1, 'o': 2} and score 11.

- Index 3 (Word: "good"):
"good" can be formed using {'g': 1, 'o': 2, 'd': 1}.
Score: 3 + 0 + 0 + 3 = 6.
New state: {'a': 2, 'c': 1, 'd': 2, 'g': 0, 'o': 0} and score 6.

Recursive Depth:
- From "dog":
"cat" cannot be formed.
"dad" and "good" can be formed, explore further with updated scores.

- From "dad":
Remaining letters: {'a': 1, 'c': 1, 'd': 1, 'g': 1, 'o': 2}.
Explore "dog" (already used), "cat" (not enough 'c'), "good" (new score 21).

- From "good":
Remaining letters: {'a': 2, 'c': 1, 'd': 2, 'g': 0, 'o': 0}.
Explore "dog" (already used), "cat" (not enough 'c'), "dad" (new score 27).