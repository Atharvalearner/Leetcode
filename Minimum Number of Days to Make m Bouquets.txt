class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        if((long) m*k > bloomDay.length){
            return -1;
        }
        int low = 1, end = (int) 1e9;
        while(low < end){
            int mid = low + (end - low) / 2;
            if(isPossible(bloomDay,m,k,mid)){
                end = mid;
            }else{
                low = mid + 1;
            }
        }
        return low;
    }
    public boolean isPossible(int[] bloomday,int m, int k, int mid){
        int sum = 0;
        for(int i = 0; i < bloomday.length; i++){
            int count = 0;
            while(i < bloomday.length && count < k && bloomday[i] <= mid){
                count++;
                i++;
            }
            if(count == k){
                sum++;
                i--;
            }
            if(sum >= m){
                return true;
            }
        }
        return false;
    }
}

# Approach
1. Initial Check:
	- If m * k exceeds the length of the bloomDay array, it's impossible to make m bouquets, so return -1.
2. Binary Search initialization :
	- Use binary search to determine the minimum number of days required.
	- Initialize low to 1 (the minimum possible day) and high to (10^9) (the maximum possible day given the constraints).
3. Binary Search Execution:
	- While low is less than high, calculate the middle value (mid).
	- Use the helper function isPossibleBouquets to check if it's possible to make m bouquets within mid days.
	- If possible, adjust high to mid.
	- Otherwise, adjust low to mid + 1.
4. Helper Function (isPossibleBouquets):
	- Iterate through the bloomDay array, counting consecutive flowers that have bloomed on or before the given day.
	- Track the number of valid bouquets formed.
	- Return true if the required number of bouquets (m) can be formed, otherwise false.

# Complexity :
- Time : O(n log(max_day))
- Space : O(1)