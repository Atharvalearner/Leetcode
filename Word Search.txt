class Solution {
    public boolean exist(char[][] board, String word) {
        int n = board.length, m = board[0].length;
        if(word.length() == 0){
            return true;
        }
        if(n*m < word.length()){	// if board size (rows*cols) < word length, => word has some character(s) not present in board. So, just return False. This is optimized way as we are avoiding doing DFS search in such test cases. 
            return false;
        }
        for(int row = 0; row < n; row++){
            for(int col = 0; col < m; col++){
                if(board[row][col] == word.charAt(0)){	// keep iterating until we don't find first character of "word"
                    boolean isFound = dfs(board,new boolean[n][m],row,col,word,0);
                    if(isFound == true){
                        return true;
                    }
                }
            }
        }
        return false;	// if we traveresed all chars of board, it means we did not find all chars of word. so return false.
    }
    public boolean dfs(char[][] board,boolean[][] visited,int row,int col,String word,int index){
        if((row < 0 || row >= board.length) || (col < 0 || col >= board[0].length) || board[row][col] != word.charAt(index)){		// return false, if:  a)  row or col goes out of bound.  b) char in board != char in word 
            return false;
        }
        if(visited[row][col]){	// this element already visited, so don't do DFS on this
            return false;
        }
        if(index == word.length()-1){
            return true;
        }
        visited[row][col] = true;	// mark it as visited now     
        if(dfs(board,visited,row,col-1,word,index+1) || dfs(board,visited,row,col+1,word,index+1) || dfs(board,visited,row-1,col,word,index+1) || dfs(board,visited,row+1,col,word,index+1)){	// DFS on Left,right,up,down, if any one of this is true then it return true.
            return true;
        }
        visited[row][col] = false;
        return false;
    }
}

# Complexity :
- Time : O(N * M)
