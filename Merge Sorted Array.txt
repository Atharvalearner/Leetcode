class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m - 1 , j = n - 1, k = m + n - 1;
        while(i >= 0 && j >= 0) {
            if(nums1[i] >= nums2[j]) {
                nums1[k] = nums1[i];
                i--;
            } else {
                nums1[k] = nums2[j];
                j--;
            }
            k--;
        }
        while(i >= 0){
            nums1[k--] = nums1[i--];
        }
        while(j >= 0){
            nums1[k--] = nums2[j--];
        }
        return;
    }
}

/*
#Approach
Initialize i and j to store indices of the last element of 1st and 2nd array respectively.
Initialize a variable k to store the last index of the 1st array, because result will be store in 1st array.
Create a loop until either of i or j becomes zero.
Either of i or j is not zero, which means some elements are yet to be merged.
Being already in a sorted manner, append them to the 1st array in the front.
While i does not become zero , then decrement the i and k.
While j does not become zero , then decrement the j and k.
return the result.

#Complexity
Time complexity: O(m+n)
Space complexity:

*/